{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../src/utils/math.ts","../../src/utils/utils.ts","../../src/utils/state.ts","../../src/utils/event.ts","../../src/Controller.ts","../../src/hooks/useRecognizers.ts","../../src/recognizers/Recognizer.ts","../../src/recognizers/CoordinatesRecognizer.ts","../../src/utils/config.ts","../../src/recognizers/ScrollRecognizer.ts","../../src/hooks/useScroll.ts"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","addV","v1","v2","v","subV","calculateVelocity","delta","delta_t","len","Math","calculateVelocities","Array","calculateDistance","movement","calculateDirection","calculateAllKinematics","velocities","velocity","distance","direction","sign","x","Number","getIntentionalDisplacement","threshold","abs","rubberband","dimension","constant","rubberband2","rubberbandIfOutOfBounds","position","min","max","minMax","noop","chainFns","fns","args","fn","def","matchKeysFromObject","matchingObject","o","valueFn","getInitialState","initialCommon","_active","_blocked","_intentional","_movement","_initial","_lastEventType","event","values","offset","lastOffset","initial","previous","first","last","active","timeStamp","startTime","elapsedTime","cancel","canceled","memo","undefined","initialCoordinates","axis","xy","vxvy","initialDistanceAngle","da","vdva","origin","turns","shared","hovering","scrolling","wheeling","dragging","moving","pinching","touches","buttons","down","shiftKey","altKey","metaKey","ctrlKey","drag","_isTap","_delayedEvent","tap","swipe","pinch","wheel","move","scroll","setListeners","add","action","listeners","eventName","el","addListeners","removeListeners","getTouchEvents","changedTouches","getGenericEventData","touchEvents","getModifierKeys","getScrollEventValues","currentTarget","scrollX","scrollY","scrollLeft","scrollTop","Controller","state","timeouts","domListeners","windowListeners","bindings","clean","stateKey","resetBindings","domTarget","getDomTarget","config","addWindowListeners","removeWindowListeners","addDomTargetListeners","target","addBindings","eventNamesArray","getBindings","captureString","fnsArray","getBind","useRecognizers","handlers","classes","nativeHandlers","controller","current","nativeRefs","bind","RecognizerClass","React","Recognizer","debounced","setTimeout","ms","window","clearTimeout","getStartGestureState","bounds","vector","fireGestureHandler","intentionalX","intentionalY","forceFlag","newMemo","updateSharedState","this","updateGestureState","getGenericPayload","type","isStartEvent","checkIntentionality","getMovement","t0","t1","intentional","prevMovement","i0","i1","getInternalMovement","_m0","_m1","intentionalityCheck","_i0","_i1","_rubberband","enabled","CoordinatesRecognizer","_ix","_iy","intentionalMovement","absX","absY","configAxis","lockDirection","getKinematics","movementDetection","kinematics","mapStateValues","defaultWindow","defaultCoordinatesOptions","getInternalGenericOptions","eventOptions","passive","capture","pointer","restConfig","getInternalGestureOptions","gestureConfig","getInternalCoordinatesOptions","coordinatesConfig","internalOptions","boundsArray","ScrollRecognizer","ingKey","scrollShouldRun","onScroll","onScrollStart","startState","onScrollChange","genericEventData","onScrollEnd","useScroll","handler","mergedConfig"],"mappings":"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","file":"static/js/0.78a63d99.chunk.js","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","// vector add\nexport function addV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v + v2[i]) as T\n}\n\n// vector substract\nexport function subV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v - v2[i]) as T\n}\n/**\n * Calculates velocity\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @param len the length of the delta vector\n * @returns velocity\n */\nexport function calculateVelocity(delta: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...delta)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(delta: T, delta_t: number): T {\n  return (delta_t ? delta.map(v => v / delta_t) : Array(delta.length).fill(0)) as T\n}\n\n/**\n * Calculates distance\n * @param movement the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(movement: number[]): number {\n  return Math.hypot(...movement)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param delta\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(delta: T, len?: number): T {\n  len = len || Math.hypot(...delta) || 1\n  return delta.map(v => v / len!) as T\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param movement the difference between current and initial vectors\n * @param delta the difference between current and previous vectors\n * @param delta_t the time difference between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(movement: T, delta: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...delta)\n\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len),\n  }\n}\n\n/**\n * Because IE doesn't support `Math.sign` function, so we use the polyfill version of the function.\n * This polyfill function is suggested by Mozilla\n * :https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign#Polyfill\n * @param x target number\n */\nexport function sign(x: number) {\n  if (Math.sign) return Math.sign(x)\n  return Number(x > 0) - Number(x < 0) || +x\n}\n\nexport function getIntentionalDisplacement(movement: number, threshold: number): number | false {\n  const abs = Math.abs(movement)\n  return abs >= threshold ? sign(movement) * threshold : false\n}\n\nfunction minMax(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(value, max))\n}\n\n// Based on @aholachek ;)\n// https://twitter.com/chpwn/status/285540192096497664\n// iOS constant = 0.55\n\n// https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5\nfunction rubberband2(distance: number, constant: number) {\n  // default constant from the article is 0.7\n  return Math.pow(distance, constant * 5)\n}\n\nfunction rubberband(distance: number, dimension: number, constant: number) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return rubberband2(distance, constant)\n  return (distance * dimension * constant) / (dimension + constant * distance)\n}\n\nexport function rubberbandIfOutOfBounds(position: number, min: number, max: number, constant = 0.15) {\n  if (constant === 0) return minMax(position, min, max)\n\n  if (position < min) {\n    return -rubberband(min - position, max - min, constant) + min\n  }\n  if (position > max) {\n    return rubberband(position - max, max - min, constant) + max\n  }\n  return position\n}\n","import { Fn, Vector2 } from '../types'\n\n// blank function\nexport function noop() {}\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\nexport const def = {\n  array: <T>(value: T | T[]): T[] => (Array.isArray(value) ? value : [value, value]),\n  withDefault: <T>(value: T | undefined, defaultIfUndefined: T): T => (value !== void 0 ? value : defaultIfUndefined),\n}\n\nexport function matchKeysFromObject<T extends object, K extends object>(obj: T, matchingObject: K): Partial<T> {\n  const o: Partial<T> = {}\n  Object.entries(obj).forEach(\n    ([key, value]) => (value !== void 0 || key in matchingObject) && (o[key as keyof T] = value)\n  )\n  return o\n}\n\nexport function valueFn(v: Vector2 | (() => Vector2)) {\n  return typeof v === 'function' ? v() : v\n}\n","import { noop } from './utils'\nimport { CommonGestureState, Coordinates, State, DistanceAngle, Vector2 } from '../types'\n\nexport function getInitialState(): State {\n  // common initial state for all gestures\n  const initialCommon: CommonGestureState = {\n    _active: false,\n    _blocked: false,\n    _intentional: [false, false],\n    _movement: [0, 0],\n    _initial: [0, 0],\n    _lastEventType: undefined,\n    event: undefined,\n    // currentTarget: undefined,\n    // pointerId: undefined,\n    values: [0, 0],\n    velocities: [0, 0],\n    delta: [0, 0],\n    movement: [0, 0],\n    offset: [0, 0],\n    lastOffset: [0, 0],\n    direction: [0, 0],\n    initial: [0, 0],\n    previous: [0, 0],\n    first: false,\n    last: false,\n    active: false,\n    timeStamp: 0,\n    startTime: 0,\n    elapsedTime: 0,\n    cancel: noop,\n    canceled: false,\n    memo: undefined,\n    args: undefined,\n  }\n\n  // initial state for coordinates-based gestures\n  const initialCoordinates: Coordinates = {\n    axis: undefined,\n    xy: [0, 0] as Vector2,\n    vxvy: [0, 0] as Vector2,\n    velocity: 0,\n    distance: 0,\n  }\n\n  // initial state for distance and angle-based gestures (pinch)\n  const initialDistanceAngle: DistanceAngle = {\n    da: [0, 0] as Vector2,\n    vdva: [0, 0] as Vector2,\n    origin: undefined,\n    turns: 0,\n  }\n\n  // initial state object (used by the gesture controller)\n  return {\n    shared: {\n      hovering: false,\n      scrolling: false,\n      wheeling: false,\n      dragging: false,\n      moving: false,\n      pinching: false,\n      touches: 0,\n      buttons: 0,\n      down: false,\n      shiftKey: false,\n      altKey: false,\n      metaKey: false,\n      ctrlKey: false,\n    },\n    drag: {\n      ...initialCommon,\n      ...initialCoordinates,\n      _isTap: true,\n      _delayedEvent: false,\n      tap: false,\n      swipe: [0, 0],\n    },\n    pinch: { ...initialCommon, ...initialDistanceAngle },\n    wheel: { ...initialCommon, ...initialCoordinates },\n    move: { ...initialCommon, ...initialCoordinates },\n    scroll: { ...initialCommon, ...initialCoordinates },\n  }\n}\n","import { Fn, EventOptions, UseGestureEvent, Vector2, WebKitGestureEvent } from '../types'\n\nconst isBrowser = typeof window !== 'undefined'\n\nexport const supportsTouchEvents = () => isBrowser && window.ontouchstart === null\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([eventName, fn]) => el[action](eventName, fn, options))\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function supportsGestureEvents(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: no type definitions for webkit GestureEvents\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: UseGestureEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\n\nfunction getTouchEvents(event: UseGestureEvent) {\n  if ('touches' in event) {\n    const { touches, changedTouches } = event\n    return touches.length > 0 ? touches : changedTouches\n  }\n  return null\n}\n\nexport function getGenericEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent) {\n  const buttons = 'buttons' in event ? event.buttons : 0\n  const touchEvents = getTouchEvents(event)\n  const touches = (touchEvents && touchEvents.length) || 0\n  const down = touches > 0 || buttons > 0\n  return { touches, down, buttons, ...getModifierKeys(event) }\n}\n\ntype Values = { values: Vector2 }\n\n/**\n * Gets scroll event values\n * @param event\n * @returns scroll event values\n */\nexport function getScrollEventValues(event: UseGestureEvent): Values {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = event.currentTarget as Element & Window\n  return { values: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0] }\n}\n\n/**\n * Gets wheel event values.\n * @param event\n * @returns wheel event values\n */\nexport function getWheelEventValues(event: UseGestureEvent<React.WheelEvent>): Values {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { values: [deltaX, deltaY] }\n}\n\n/**\n * Gets pointer event values.\n * @param event\n * @returns pointer event values\n */\nexport function getPointerEventValues(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): Values {\n  const touchEvents = getTouchEvents(event)\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : (event as React.PointerEvent)\n  return { values: [clientX, clientY] }\n}\n\nconst WEBKIT_DISTANCE_SCALE_FACTOR = 260\n\n/**\n * Gets webkit gesture event values.\n * @param event\n * @returns webkit gesture event values\n */\nexport function getWebkitGestureEventValues(event: WebKitGestureEvent): Values {\n  return { values: [event.scale * WEBKIT_DISTANCE_SCALE_FACTOR, event.rotation] as Vector2 }\n}\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent) {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const values: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { values, origin }\n}\n","import {\n  StateKey,\n  State,\n  Fn,\n  ReactEventHandlerKey,\n  ReactEventHandlers,\n  InternalConfig,\n  InternalHandlers,\n} from './types'\nimport { getInitialState } from './utils/state'\nimport { addListeners, removeListeners } from './utils/event'\nimport { chainFns } from './utils/utils'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] }>\n\n/**\n * The controller will keep track of the state for all gestures and also keep\n * track of timeouts, and window listeners.\n *\n * @template BinderType the type the bind function should return\n */\nexport default class Controller {\n  public config!: InternalConfig\n  public handlers!: Partial<InternalHandlers>\n  public state: State = getInitialState() // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n\n  /**\n   * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.\n   */\n  public clean = (): void => {\n    this.resetBindings()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(stateKey as StateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render).\n   * Resets the binding object and remove dom listeners attached to config.domTarget\n   */\n  public resetBindings = (): void => {\n    this.bindings = {}\n    const domTarget = this.getDomTarget()\n    if (domTarget) {\n      removeListeners(domTarget, this.domListeners, this.config.eventOptions)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Returns the domTarget element and parses a ref if needed.\n   */\n  private getDomTarget = (): EventTarget | null | undefined => {\n    const { domTarget } = this.config\n    return domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window.\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.eventOptions)\n  }\n\n  /**\n   * Commodity function to let recognizers simply remove listeners to config.window.\n   */\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.eventOptions)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  public addDomTargetListeners = (target: EventTarget): void => {\n    /** We iterate on the entries of this.binding for each event, then we chain\n     * the array of functions mapped to it and push them to this.domListeners\n     */\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(fns as Fn[]))])\n    })\n\n    addListeners(target, this.domListeners, this.config.eventOptions)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys.\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  public addBindings = (eventNames: ReactEventHandlerKey | ReactEventHandlerKey[], fn: Fn): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n    eventNamesArray.forEach(eventName => {\n      if (this.bindings[eventName]) this.bindings[eventName]!.push(fn)\n      else this.bindings[eventName] = [fn]\n    })\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with.\n   */\n  public getBindings = (): ReactEventHandlers => {\n    const bindings: ReactEventHandlers = {}\n    const { captureString } = this.config\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      bindings[key] = chainFns(...(fnsArray as Fn[]))\n    })\n\n    return bindings\n  }\n\n  public getBind = () => {\n    // If config.domTarget is set we add event listeners to it and return the clean function.\n    if (this.config.domTarget) {\n      const domTarget = this.getDomTarget()\n      domTarget && this.addDomTargetListeners(domTarget)\n      return this.clean\n    }\n\n    // If not, we return an object that contains gesture handlers mapped to react handler event keys.\n    return this.getBindings()\n  }\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from 'react'\nimport Controller from '../Controller'\nimport {\n  InternalConfig,\n  HookReturnType,\n  InternalHandlers,\n  RecognizerClasses,\n  GenericOptions,\n  NativeHandlersPartial,\n  ReactEventHandlerKey,\n  Fn,\n} from '../types'\n/**\n * @private\n *\n * Utility hook called by all gesture hooks and that will be responsible for the internals.\n *\n * @param {Partial<InternalHandlers>} handlers\n * @param {RecognizerClasses} classes\n * @param {InternalConfig} config\n * @param {NativeHandlersPartial} nativeHandlers - native handlers such as onClick, onMouseDown, etc.\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport default function useRecognizers<Config extends Partial<GenericOptions>>(\n  handlers: Partial<InternalHandlers>,\n  classes: RecognizerClasses,\n  config: InternalConfig,\n  nativeHandlers?: NativeHandlersPartial\n): (...args: any[]) => HookReturnType<Config> {\n  // The gesture controller keeping track of all gesture states\n  const controller = React.useMemo(() => {\n    const current = new Controller()\n\n    /**\n     * The bind function will create gesture recognizers and return the right\n     * bind object depending on whether `domTarget` was specified in the config object.\n     */\n    const bind = (...args: any[]) => {\n      current.resetBindings()\n      for (let RecognizerClass of classes) {\n        new RecognizerClass(current, args).addBindings()\n      }\n\n      // we also add event bindings for native handlers\n      if (controller.nativeRefs) {\n        for (let eventName in controller.nativeRefs)\n          current.addBindings(\n            eventName as ReactEventHandlerKey,\n            // @ts-ignore we're cheating when it comes to event type :(\n            controller.nativeRefs[eventName] as Fn\n          )\n      }\n\n      return current.getBind() as HookReturnType<Config>\n    }\n\n    return { nativeRefs: nativeHandlers, current, bind }\n  }, [])\n\n  // We reassign the config and handlers to the controller on every render.\n  controller.current!.config = config\n  controller.current!.handlers = handlers\n  // We assign nativeHandlers, otherwise they won't be refreshed on the next render.\n  controller.nativeRefs = nativeHandlers\n\n  // Run controller clean functions on unmount.\n  React.useEffect(() => controller.current!.clean, [])\n\n  return controller.bind\n}\n","import Controller from '../Controller'\nimport {\n  StateKey,\n  SharedGestureState,\n  Fn,\n  UseGestureEvent,\n  IngKey,\n  InternalConfig,\n  GestureState,\n  PartialGestureState,\n  Vector2,\n  FalseOrNumber,\n  FullGestureState,\n} from '../types'\nimport { getInitialState } from '../utils/state'\nimport { subV, addV, getIntentionalDisplacement, rubberbandIfOutOfBounds } from '../utils/math'\nimport { valueFn } from '../utils/utils'\n\n/**\n * @private\n * Recognizer abstract class.\n *\n * @protected\n * @abstract\n * @type {StateKey<T>} whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<T extends StateKey> {\n  protected abstract ingKey: IngKey // dragging, scrolling, etc.\n  protected debounced: Boolean = true\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param stateKey drag, move, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly stateKey: T,\n    protected readonly controller: Controller,\n    protected readonly args: any[] = []\n  ) {}\n\n  // Returns the gesture config\n  protected get config(): NonNullable<InternalConfig[T]> {\n    return this.controller.config[this.stateKey]!\n  }\n\n  // Is the gesture enabled\n  protected get enabled(): boolean {\n    return this.controller.config.enabled && this.config.enabled\n  }\n\n  // Returns the controller state for a given gesture\n  protected get state(): GestureState<T> {\n    return this.controller.state[this.stateKey]\n  }\n\n  // Returns the gesture handler\n  protected get handler() {\n    return this.controller.handlers[this.stateKey]!\n  }\n\n  // Conveninence method to update the shared state\n  protected updateSharedState(sharedState: Partial<SharedGestureState> | null) {\n    Object.assign(this.controller.state.shared, sharedState)\n  }\n\n  // Conveninence method to update the gesture state\n  protected updateGestureState(gestureState: PartialGestureState<T> | null) {\n    Object.assign(this.state, gestureState)\n  }\n\n  // Convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // Convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // Convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // Convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  /**\n   * Utility function to get kinematics of the gesture.\n   *\n   * @abstract\n   * @values - values we want to calculate the kinematics from\n   * @event - the pointer event\n   * @returns - set of values including movement, velocity, velocities, distance and direction\n   */\n  protected abstract getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T>\n\n  protected abstract mapStateValues(state: GestureState<T>): PartialGestureState<T>\n\n  // Should return the bindings to be added for a given gesture\n  public abstract addBindings(): void\n\n  /**\n   * Returns a generic, common payload for all gestures from an event.\n   *\n   * @param {UseGestureEvent} event\n   * @param {boolean} [isStartEvent]\n   * @returns - the generic gesture payload\n   */\n  protected getGenericPayload(event: UseGestureEvent, isStartEvent?: boolean) {\n    const { timeStamp, type } = event\n    const { values, startTime } = this.state\n\n    return {\n      _lastEventType: type,\n      event,\n      timeStamp,\n      elapsedTime: isStartEvent ? 0 : timeStamp - startTime!,\n      args: this.args,\n      previous: values,\n    }\n  }\n  /**\n   * Returns the reinitialized start state for the gesture.\n   * Should be common to all gestures.\n   *\n   * @param {Vector2} values\n   * @param {UseGestureEvent} event\n   * @returns - the start state for the gesture\n   */\n  protected getStartGestureState = (values: Vector2, event: UseGestureEvent) => {\n    return {\n      ...getInitialState()[this.stateKey],\n      _active: true,\n      values,\n      initial: values,\n      offset: this.state.offset,\n      lastOffset: this.state.offset,\n      startTime: event.timeStamp,\n    }\n  }\n\n  /**\n   * Returns state properties depending on the movement and state.\n   *\n   * Should be overriden for custom behavior, doesn't do anything in the implementation\n   * below.\n   */\n  protected checkIntentionality(\n    _intentional: [FalseOrNumber, FalseOrNumber],\n    _movement: Vector2,\n    _state: PartialGestureState<T>\n  ): PartialGestureState<T> {\n    return { _intentional, _blocked: false } as PartialGestureState<T>\n  }\n\n  protected abstract getInternalMovement(values: Vector2, state: GestureState<T>): Vector2\n\n  /**\n   * Returns basic movement properties for the gesture based on the next values and current state.\n   */\n  protected getMovement(values: Vector2, state: GestureState<T> = this.state): PartialGestureState<T> {\n    const { initial, threshold, rubberband } = this.config\n\n    const [t0, t1] = threshold\n\n    const { _initial, _active, _intentional: intentional, lastOffset, movement: prevMovement } = state\n    let [i0, i1] = intentional\n\n    const [_m0, _m1] = this.getInternalMovement(values, state)\n\n    /**\n     * For both dimensions of the gesture, check its intentionality on each frame.\n     */\n    if (i0 === false) {\n      i0 = getIntentionalDisplacement(_m0, t0)\n    }\n    if (i1 === false) {\n      i1 = getIntentionalDisplacement(_m1, t1)\n    }\n\n    // Get gesture specific state properties based on intentionality and movement.\n    const intentionalityCheck = this.checkIntentionality([i0, i1], [_m0, _m1], state)\n\n    const { _intentional, _blocked } = intentionalityCheck\n    const [_i0, _i1] = _intentional!\n    const _movement = [_m0, _m1]\n\n    if (_i0 !== false && intentional[0] === false) _initial[0] = valueFn(initial)[0]\n    if (_i1 !== false && intentional[1] === false) _initial[1] = valueFn(initial)[1]\n\n    /**\n     * If the gesture has been blocked (from gesture specific checkIntentionality),\n     * stop right there.\n     */\n    if (_blocked) return { ...intentionalityCheck, _movement, delta: [0, 0] }\n\n    /**\n     * The movement sent to the handler has 0 in its dimensions when intentionality is false.\n     * It is calculated from the actual movement minus the threshold.\n     */\n    let movement = [\n      _i0 !== false ? _m0 - _i0 : valueFn(initial)[0],\n      _i1 !== false ? _m1 - _i1 : valueFn(initial)[1],\n    ] as Vector2\n    const offset = addV(movement, lastOffset)\n\n    /**\n     * Rubberband should be 0 when the gesture is no longer active, so that movement\n     * and offset can return within their bounds.\n     */\n    const _rubberband: Vector2 = _active ? rubberband : [0, 0]\n    movement = this.rubberband(addV(movement, _initial), _rubberband) // rubberbanded movement\n\n    return {\n      ...intentionalityCheck,\n      _initial,\n      _movement,\n      movement,\n      offset: this.rubberband(offset, _rubberband), // rubberbanded offset\n      delta: subV(movement, prevMovement),\n    } as PartialGestureState<T>\n  }\n\n  // Runs rubberband on a vector\n  protected rubberband = (vector: Vector2, rubberband: Vector2): Vector2 => {\n    const { bounds } = this.config\n\n    /**\n     * [x, y]: [rubberband(x, min, max), rubberband(y, min, max)]\n     */\n    return vector.map((v, i) => rubberbandIfOutOfBounds(v, bounds[i][0], bounds[i][1], rubberband[i])) as Vector2\n  }\n\n  // Cleans the gesture. Can be overriden by gestures.\n  protected clean() {\n    this.clearTimeout()\n    this.removeWindowListeners()\n  }\n\n  /**\n   * Fires the gesture handler\n   *\n   * @param {boolean} [forceFlag] - if true, then the handler will fire even if the gesture is not intentional\n   */\n  protected fireGestureHandler = (forceFlag?: boolean): FullGestureState<T> | null => {\n    /**\n     * If the gesture has been blocked (this can happen when the gesture has started in an unwanted direction),\n     * clean everything and don't do anything.\n     */\n    if (this.state._blocked) {\n      // we need debounced gestures to end by themselves\n      if (!this.debounced) {\n        this.state._active = false\n        this.clean()\n      }\n      return null\n    }\n\n    // If the gesture has no intentional dimension, don't do fire the handler.\n    const [intentionalX, intentionalY] = this.state._intentional\n    if (!forceFlag && intentionalX === false && intentionalY === false) return null\n\n    const { _active, active } = this.state\n\n    this.state.active = _active\n    this.state.first = _active && !active // `first` is true when the gesture becomes active\n    this.state.last = active && !_active // `last` is true when the gesture becomes inactive\n\n    this.controller.state.shared[this.ingKey] = _active // Sets dragging, pinching, etc. to the gesture active state\n\n    const state = {\n      ...this.controller.state.shared,\n      ...this.state,\n      ...this.mapStateValues(this.state), // Sets xy or da to the gesture state values\n    } as FullGestureState<T>\n\n    // @ts-ignore\n    const newMemo = this.handler(state)\n\n    // Sets memo to the returned value of the handler (unless it's not undefined)\n    this.state.memo = newMemo !== void 0 ? newMemo : this.state.memo\n\n    // Cleans the gesture when the gesture is no longer active.\n    if (!_active) this.clean()\n\n    return state\n  }\n}\n","import Recognizer from './Recognizer'\nimport { calculateAllKinematics, subV } from '../utils/math'\nimport { Vector2, UseGestureEvent, PartialGestureState, FalseOrNumber, GestureState, CoordinatesKey } from '../types'\n\n/**\n * @private\n * Abstract class for coordinates-based gesture recongizers\n * @abstract\n * @class CoordinatesRecognizer\n * @extends {Recognizer<T>}\n * @template T\n */\nexport default abstract class CoordinatesRecognizer<T extends CoordinatesKey> extends Recognizer<T> {\n  /**\n   * Returns the real movement (without taking intentionality into acount)\n   */\n  protected getInternalMovement(values: Vector2, state: GestureState<T>): Vector2 {\n    return subV(values, state.initial)\n  }\n\n  /**\n   * In coordinates-based gesture, this function will detect the first intentional axis,\n   * lock the gesture axis if lockDirection is specified in the config, block the gesture\n   * if the first intentional axis doesn't match the specified axis in config.\n   *\n   * @param {[FalseOrNumber, FalseOrNumber]} _intentional\n   * @param {Vector2} _movement\n   * @param {PartialGestureState<T>} state\n   */\n  protected checkIntentionality(\n    _intentional: [FalseOrNumber, FalseOrNumber],\n    _movement: Vector2,\n    state: PartialGestureState<T>\n  ): PartialGestureState<T> {\n    let [_ix, _iy] = _intentional\n    const intentionalMovement = _ix !== false || _iy !== false\n    let { axis } = state\n    let _blocked = false\n\n    // If the movement is intentional, we can compute axis.\n    if (intentionalMovement) {\n      const [absX, absY] = _movement.map(Math.abs)\n\n      const { axis: configAxis, lockDirection } = this.config\n\n      // We make sure we only set axis value if it hadn't been detected before.\n      axis = axis || (absX > absY ? 'x' : absX < absY ? 'y' : undefined)\n      if (!!configAxis || lockDirection) {\n        if (!!axis) {\n          // If the detected axis doesn't match the config axis we block the gesture\n          if (!!configAxis && axis !== configAxis) _blocked = true\n          else {\n            // Otherwise we prevent the gesture from updating the unwanted axis.\n            const lockedIndex = axis === 'x' ? 1 : 0\n            _intentional![lockedIndex] = false\n          }\n        } else {\n          // Until we've detected the axis, we prevent the hnadler from updating.\n          _intentional = [false, false]\n        }\n      }\n    }\n\n    return { _intentional, _blocked, axis } as PartialGestureState<T>\n  }\n\n  getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T> {\n    const { timeStamp } = this.state\n\n    const movementDetection = this.getMovement(values, this.state)\n    const { _blocked, delta, movement } = movementDetection\n\n    if (_blocked) return movementDetection\n\n    const delta_t = event.timeStamp - timeStamp!\n    const kinematics = calculateAllKinematics(movement!, delta!, delta_t)\n\n    return {\n      values,\n      delta,\n      ...movementDetection,\n      ...kinematics,\n    }\n  }\n\n  protected mapStateValues(state: GestureState<T>): PartialGestureState<T> {\n    return { xy: state.values, vxvy: state.velocities } as PartialGestureState<T>\n  }\n}\n","import { def, matchKeysFromObject } from './utils'\nimport {\n  Vector2,\n  GenericOptions,\n  InternalGenericOptions,\n  DragConfig,\n  Tuple,\n  GestureOptions,\n  InternalDragOptions,\n  InternalGestureOptions,\n  CoordinatesConfig,\n  CoordinatesOptions,\n  InternalCoordinatesOptions,\n  DistanceAngleConfig,\n  InternalDistanceAngleOptions,\n} from '../types'\n\nconst DEFAULT_DRAG_DELAY = 180\nconst DEFAULT_RUBBERBAND = 0.15\nconst DEFAULT_SWIPE_VELOCITY = 0.5\nconst DEFAULT_SWIPE_DISTANCE = 60\n\nconst defaultWindow = typeof window !== 'undefined' ? window : undefined\n\nconst defaultCoordinatesOptions: CoordinatesOptions = {\n  lockDirection: false,\n  axis: undefined,\n  bounds: undefined,\n}\n\n/**\n * @private\n *\n * Returns the internal generic option object.\n *\n * @param {Partial<GenericOptions>} [config={}]\n * @returns {InternalGenericOptions}\n */\nexport function getInternalGenericOptions(config: Partial<GenericOptions> = {}): InternalGenericOptions {\n  let {\n    eventOptions: { passive = true, capture = false, pointer = false } = {},\n    window = defaultWindow,\n    domTarget = undefined,\n    enabled = true,\n    ...restConfig\n  } = config\n\n  return {\n    ...restConfig,\n    enabled,\n    domTarget,\n    window,\n    // passive is always true if there's no domTarget\n    eventOptions: { passive: !domTarget || !!passive, capture: !!capture },\n    captureString: capture ? 'Capture' : '',\n    pointer: !!pointer,\n  }\n}\n\nexport function getInternalGestureOptions(gestureConfig: Partial<GestureOptions>): InternalGestureOptions {\n  let { threshold = undefined, rubberband = 0, enabled = true, initial = [0, 0] } = gestureConfig\n\n  if (typeof rubberband === 'boolean') rubberband = rubberband ? DEFAULT_RUBBERBAND : 0\n  if (threshold === void 0) threshold = 0\n\n  return {\n    enabled,\n    initial,\n    threshold: def.array(threshold) as Vector2,\n    rubberband: def.array(rubberband) as Vector2,\n  }\n}\n\nexport function getInternalCoordinatesOptions(coordinatesConfig: CoordinatesConfig = {}): InternalCoordinatesOptions {\n  const { axis, lockDirection, bounds = {}, ...internalOptions } = coordinatesConfig\n\n  const boundsArray = [\n    [def.withDefault(bounds.left, -Infinity), def.withDefault(bounds.right, Infinity)],\n    [def.withDefault(bounds.top, -Infinity), def.withDefault(bounds.bottom, Infinity)],\n  ]\n\n  return {\n    ...getInternalGestureOptions(internalOptions),\n    ...defaultCoordinatesOptions,\n    ...matchKeysFromObject({ axis, lockDirection }, coordinatesConfig),\n    bounds: boundsArray as Tuple<Vector2>,\n  }\n}\n\nexport function getInternalDistanceAngleOptions(\n  distanceAngleConfig: DistanceAngleConfig = {}\n): InternalDistanceAngleOptions {\n  const { distanceBounds = {}, angleBounds = {}, ...internalOptions } = distanceAngleConfig\n\n  const boundsArray = [\n    [def.withDefault(distanceBounds.min, -Infinity), def.withDefault(distanceBounds.max, Infinity)],\n    [def.withDefault(angleBounds.min, -Infinity), def.withDefault(angleBounds.max, Infinity)],\n  ]\n\n  return {\n    ...getInternalGestureOptions(internalOptions),\n    bounds: boundsArray as Tuple<Vector2>,\n  }\n}\n\nexport function getInternalDragOptions(dragConfig: DragConfig = {}): InternalDragOptions {\n  let { enabled, threshold, bounds, rubberband, initial, ...dragOptions } = dragConfig\n  let {\n    swipeVelocity = DEFAULT_SWIPE_VELOCITY,\n    swipeDistance = DEFAULT_SWIPE_DISTANCE,\n    delay = false,\n    filterTaps = false,\n    axis,\n    lockDirection,\n  } = dragOptions\n\n  if (threshold === void 0) {\n    threshold = Math.max(0, filterTaps ? 3 : 0, lockDirection || axis ? 1 : 0)\n  } else {\n    filterTaps = true\n  }\n\n  const internalCoordinatesOptions = getInternalCoordinatesOptions(\n    matchKeysFromObject({ enabled, threshold, bounds, rubberband, axis, lockDirection, initial }, dragConfig)\n  )\n\n  return {\n    ...internalCoordinatesOptions,\n    filterTaps: filterTaps || internalCoordinatesOptions.threshold[0] + internalCoordinatesOptions.threshold[1] > 0,\n    swipeVelocity: def.array(swipeVelocity) as Vector2,\n    swipeDistance: def.array(swipeDistance) as Vector2,\n    delay: typeof delay === 'number' ? delay : delay ? DEFAULT_DRAG_DELAY : 0,\n  }\n}\n","import {} from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, IngKey } from '../types'\nimport { getGenericEventData, getScrollEventValues } from '../utils/event'\nimport { calculateDistance, calculateDirection } from '../utils/math'\n\nexport default class ScrollRecognizer extends CoordinatesRecognizer<'scroll'> {\n  ingKey = 'scrolling' as IngKey\n  debounced = true\n\n  constructor(controller: Controller, args: any[]) {\n    super('scroll', controller, args)\n  }\n\n  private scrollShouldRun = () => {\n    return this.enabled\n  }\n\n  onScroll = (event: UseGestureEvent): void => {\n    if (!this.scrollShouldRun()) return\n    this.clearTimeout()\n    this.setTimeout(this.onScrollEnd)\n\n    if (!this.state._active) this.onScrollStart(event)\n    else this.onScrollChange(event)\n  }\n\n  onScrollStart = (event: UseGestureEvent): void => {\n    const { values } = getScrollEventValues(event)\n\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n      initial: this.state.values,\n    }\n\n    const movementDetection = this.getMovement(values, startState)\n    const delta = movementDetection.delta!\n\n    this.updateGestureState({\n      ...startState,\n      ...movementDetection,\n      distance: calculateDistance(delta),\n      direction: calculateDirection(delta),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onScrollChange = (event: UseGestureEvent): void => {\n    const genericEventData = getGenericEventData(event)\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getScrollEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onScrollEnd = (): void => {\n    this.state._active = false\n    this.updateGestureState({ ...this.getMovement(this.state.values), velocities: [0, 0], velocity: 0 })\n    this.fireGestureHandler()\n  }\n\n  addBindings(): void {\n    this.controller.addBindings('onScroll', this.onScroll)\n  }\n}\n","import useRecognizers from './useRecognizers'\nimport ScrollRecognizer from '../recognizers/ScrollRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseScrollConfig } from '../types'\nimport { getInternalGenericOptions, getInternalCoordinatesOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Scroll hook.\n *\n * @param {Handler<'scroll'>} handler - the function fired every time the scroll gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and scroll options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useScroll<Config extends UseScrollConfig>(\n  handler: Handler<'scroll'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...scroll } = config as UseScrollConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    scroll: getInternalCoordinatesOptions(scroll),\n  }\n\n  return useRecognizers<Config>({ scroll: handler }, [ScrollRecognizer], mergedConfig)\n}\n"],"sourceRoot":""}